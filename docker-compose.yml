services:
  auth_service:
    image: ghcr.io/taekwondodev/go-rest-auth:latest
    container_name: auth_service
    ports:
      - "80:80"
    networks:
      - public_network
      - private_network
    volumes:
      - ./postgres/ssl/ca.crt:/etc/ssl/certs/postgres-ca.crt:ro
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_SSLMODE=${DB_SSLMODE}
      - DB_SSLROOTCERT=${DB_SSLROOTCERT}
    depends_on:
      postgres:
        condition: service_healthy
  
  flyway:
    image: flyway/flyway:latest
    container_name: flyway
    networks:
      - private_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      FLYWAY_URL: ${POSTGRES_URL}
      FLYWAY_USER: ${POSTGRES_USER}
      FLYWAY_PASSWORD: ${POSTGRES_PASSWORD}
      FLYWAY_CONNECT_RETRIES: 30
    volumes:
      - ./migrations:/flyway/sql/migrations
      - ./postgres/ssl/ca.crt:/flyway/conf/ca.crt:ro
    restart: "no"
    command: migrate
  
  postgres:
    image: postgres:alpine
    container_name: postgres_auth
    networks:
      - private_network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/ssl:/ssl
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/ssl/server.crt
      -c ssl_key_file=/ssl/server.key
      -c ssl_ca_file=/ssl/ca.crt
      -c listen_addresses='*'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  public_network:

  private_network:
    internal: true

volumes:
  postgres-data: