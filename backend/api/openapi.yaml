openapi: 3.0.3
info:
  title: Auth Microservice API
  version: 1.0.6

servers:
  - url: http://localhost:80
    description: Development server

paths:
  /register:
    post:
      tags:
        - Auth
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        201:
          description: Sign-up successfully!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              example:
                message: "Sign-Up successfully!"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBadRequest"
        409:
          description: conflict (email or username already exist)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorUserExists"
                  - $ref: "#/components/schemas/ErrorEmailExists"
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInternalServerError"

  /login:
    post:
      tags:
        - Auth
      summary: Sign in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
            example:
              username: "johndoe"
              password: "securepass123"
      responses:
        200:
          description: Sign-in successfully!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBadRequest"
        401:
          description: invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInvalidCredentials"
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUserNotFound"
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInternalServerError"

  /refresh:
    post:
      tags:
        - Auth
      summary: Renew Jwt Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        200:
          description: Token rinnovati con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
                example:
                  message: "Update token successfully!"
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV..."
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBadRequest"
        401:
          description: token is expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInvalidCredentials"
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInternalServerError"

  /healthz:
    get:
      tags:
        - System
      summary: Health check
      responses:
        200:
          description: Service state OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        502:
          description: error connecting to database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDbSSLHandshakeFailed"
        503:
          description: database unreachable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDbUnreacheable"
        504:
          description: database timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDbTimeout"

components:
  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          minLength: 8
        email:
          type: string
          format: email
        role:
          type: string
          description: "User role, default is 'user'"
      example:
        username: "johndoe"
        password: "securepassword123"
        email: "john@example.com"
        role: "user"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
      example:
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
      example:
        message: "Sign-in successfully!"
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    HealthResponse:
      type: object
      properties:
        status:
          type: string
        database:
          type: string
        ssl_mode:
          type: string
      example:
        status: "OK"
        database: "connected"
        ssl_mode: "enabled"

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

    ErrorUserExists:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [409]
            message:
              type: string
              enum: ["user already exists"]

    ErrorEmailExists:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [409]
            message:
              type: string
              enum: ["email already exists"]

    ErrorInvalidCredentials:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [401]
            message:
              type: string
              enum: ["invalid credentials"]

    ErrorUserNotFound:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [404]
            message:
              type: string
              enum: ["user not found"]

    ErrorBadRequest:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [400]
            message:
              type: string
              enum: ["bad request"]

    ErrorInternalServerError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [500]
            message:
              type: string
              enum: ["internal server error"]

    ErrorDbUnreacheable:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [503]
            message:
              type: string
              enum: ["database unreachable"]

    ErrorDbSSLHandshakeFailed:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [502]
            message:
              type: string
              enum: ["database SSL handshake failed"]

    ErrorDbTimeout:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: integer
              enum: [504]
            message:
              type: string
              enum: ["database timeout"]